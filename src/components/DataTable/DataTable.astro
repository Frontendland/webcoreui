---
/* eslint-disable max-lines */
import type { DataTableProps, HeadingObject } from './datatable'

import Button from '../Button/Button.astro'
import ConditionalWrapper from '../ConditionalWrapper/ConditionalWrapper.astro'
import Input from '../Input/Input.astro'
import Pagination from '../Pagination/Pagination.astro'
import Select from '../Select/Select.astro'

import checkIcon from '../../icons/check.svg?raw'
import orderIcon from '../../icons/order.svg?raw'
import searchIcon from '../../icons/search.svg?raw'

import styles from './datatable.module.scss'

interface Props extends DataTableProps {}

const {
    headings,
    filterPlaceholder = 'Filter entries',
    showFilterIcon,
    noResultsLabel = 'No results.',
    itemsPerPage,
    subText,
    columnToggleLabel = 'Columns',
    pagination,
    data,
    hover,
    striped,
    offsetStripe,
    compact,
    maxHeight,
    className,
    id
} = Astro.props

const classes = [
    styles.table,
    hover && styles.hover,
    striped && styles[`striped-${striped}s`],
    offsetStripe && styles.offset,
    compact && styles.compact,
    maxHeight && styles.scroll
]

const footerClasses = [
    styles.footer,
    subText && styles.between
]

const getColumnName = (heading: HeadingObject | string | undefined) => {
    if (!heading) {
        return undefined
    }

    return ((heading as HeadingObject).name || heading as string).toLowerCase().replace(/\s/g, '')
}

const showColumnToggle = headings?.some(heading => {
    return typeof heading === 'string' ? false : heading.toggleable
})

const columnToggleItems = [{
    items: headings?.length ? headings
        .filter(heading => typeof heading !== 'string' && heading.toggleable)
        .map(heading => ({
            name: (heading as HeadingObject).name,
            value: (heading as HeadingObject).name.toLowerCase(),
            icon: checkIcon
        })) : []
}]

const columnFilterItems = headings?.filter(heading => typeof heading !== 'string')
    .filter(heading => (heading as HeadingObject).filterable)
    .map(heading => (heading as HeadingObject).name)
    .map(heading => getColumnName(heading))

const hasPagination = data?.length && itemsPerPage
    ? data.length > itemsPerPage
    : false
---

<section class={className} id={id}>
    {(!!columnFilterItems?.length || showColumnToggle) && (
        <div class={styles.filters}>
            {!!columnFilterItems?.length && (
                <Input
                    type="search"
                    placeholder={filterPlaceholder}
                    data-id="w-data-table-filter"
                    data-filter={columnFilterItems}
                >
                    <Fragment
                        set:html={searchIcon}
                        slot={showFilterIcon ? 'default' : null}
                    />
                </Input>
            )}

            {showColumnToggle && (
                <Select
                    name={`data-table-${id || crypto.randomUUID()}`}
                    itemGroups={columnToggleItems}
                    position="bottom-end"
                    value={columnToggleLabel}
                    updateValue={false}
                />
            )}
        </div>
    )}
    <div
        class:list={classes}
        style={maxHeight ? `max-height:${maxHeight}` : undefined}
    >
        <table data-items-per-page={itemsPerPage} data-page={hasPagination && 1}>
            {headings?.length && (
                <thead>
                    <tr>
                        {headings.map(heading => (
                            <th data-name={getColumnName(heading)}>
                                <ConditionalWrapper condition={!!(heading as HeadingObject).sortable}>
                                    <Button theme="flat" slot="wrapper" data-id="w-data-table-sort">
                                        children
                                        <Fragment set:html={orderIcon} />
                                    </Button>
                                    {(heading as HeadingObject).name || heading}
                                </ConditionalWrapper>
                            </th>
                        ))}
                    </tr>
                </thead>
            )}
            <tbody>
                {data?.map((row, index) => (
                    <tr
                        data-page={hasPagination ? Math.ceil((index + 1) / itemsPerPage!) : undefined}
                        data-hidden={hasPagination && index >= itemsPerPage!}
                    >
                        {row.map((column, index) => (
                            <td data-name={getColumnName(headings?.[index])}>
                                <Fragment set:html={column} />
                            </td>
                        ))}
                    </tr>
                ))}
                <slot />
            </tbody>
            {!!columnFilterItems?.length && (
                <tfoot data-hidden="true">
                    <tr>
                        <td colspan={data?.[0].length} class={styles['no-results']}>{noResultsLabel}</td>
                    </tr>
                </tfoot>
            )}
        </table>
    </div>
    {(subText || hasPagination) && (
        <div class:list={footerClasses}>
            {subText && <span class={styles.subtext}>{subText}</span>}
            {hasPagination && (
                <Pagination
                    {...pagination}
                    totalPages={Math.ceil((data?.length || 0) / itemsPerPage!)}
                    className="w-data-table-pagination"
                />
            )}
        </div>
    )}
</section>

<script>
    import { debounce } from '../../utils/debounce'
    import { dispatch, listen } from '../../utils/event'

    const filters = document.querySelectorAll('[data-id="w-data-table-filter"]')
    const sorts = document.querySelectorAll('[data-id="w-data-table-sort"]')

    Array.from(filters).forEach(filter => {
        filter.addEventListener('input', debounce((event: Event) => {
            const target = event.target as HTMLInputElement
            const filterableColumns = target.dataset.filter
            const table = target.closest('section')?.querySelector('table') as HTMLTableElement
            const pagination = target.closest('section')?.querySelector('.w-data-table-pagination') as HTMLUListElement
            const noResults = table.querySelector('tfoot') as HTMLElement
            const tableRows = Array.from(table.querySelectorAll('tbody tr') as NodeListOf<HTMLTableRowElement>)

            tableRows.forEach(row => {
                const rowValue = Array.from(row.querySelectorAll('td'))
                    .filter(td => filterableColumns?.includes(td.dataset.name || ''))
                    .map(td => td.innerText)
                    .join('')
                    .toLowerCase()

                if (rowValue.includes(target.value.toLowerCase())) {
                    row.removeAttribute('data-hidden')
                } else {
                    row.dataset.hidden = 'true'
                }
            })

            const filteredRows = Array.from(
                table?.querySelectorAll('tbody tr:not([data-hidden])') as NodeListOf<HTMLTableRowElement>
            )

            if (!filteredRows.length) {
                noResults.removeAttribute('data-hidden')
            } else {
                noResults.dataset.hidden = 'true'
            }

            if (table.dataset.itemsPerPage && filteredRows.length >= Number(table.dataset.itemsPerPage)) {
                filteredRows.forEach((row, index) => {
                    if (index >= Number(table.dataset.itemsPerPage)) {
                        row.dataset.hidden = 'true'
                    }
                })
            }

            if (target.value) {
                pagination.style.display = 'none'
            } else {
                pagination.style.display = 'flex'

                tableRows.forEach(row => {
                    if (row.dataset.page !== table.dataset.page) {
                        row.dataset.hidden = 'true'
                    } else {
                        row.removeAttribute('data-hidden')
                    }
                })
            }

            dispatch('dataTableFilter', {
                results: filteredRows,
                numberOfResults: filteredRows.length
            })
        }, 400))
    })

    Array.from(sorts).forEach(sort => {
        let sortOrder = 1

        sort.addEventListener('click', event => {
            const target = event.target as HTMLButtonElement
            const sortBy = target.parentElement?.dataset.name
            const table = target.closest('section')?.querySelector('table')
            const tableBody = table?.querySelector('tbody')
            const sortedTableRows = Array.from(
                table?.querySelectorAll('tbody tr') as NodeListOf<HTMLTableRowElement>
            ).sort((a, b) => {
                let aValue: string | number = (a.querySelector(`[data-name=${sortBy}]`) as HTMLElement)
                    ?.innerText.replace(/\s/g, '')
                let bValue: string | number = (b.querySelector(`[data-name=${sortBy}]`) as HTMLElement)
                    ?.innerText.replace(/\s/g, '')

                if (!isNaN(aValue as any)) {
                    aValue = Number(aValue)
                }

                if (!isNaN(bValue as any)) {
                    bValue = Number(bValue)
                }

                return aValue > bValue
                    ? sortOrder * -1
                    : sortOrder
            }).map((row, index) => {
                if (table?.dataset.page) {
                    row.dataset.page = `${Math.ceil((index + 1) / Number(table.dataset.itemsPerPage))}`

                    if (row.dataset.page !== table.dataset.page) {
                        row.dataset.hidden = 'true'
                    } else {
                        row.removeAttribute('data-hidden')
                    }
                }

                return row
            })

            tableBody?.replaceChildren(...sortedTableRows)

            sortOrder = sortOrder === 1 ? -1 : 1
        })
    })

    listen('selectOnChange', event => {
        const eventName = event.name.toLowerCase().replace(/\s/g, '')
        const table = (document.querySelector(`[data-id="w-select-${event.select}"]`)
            ?.closest('section') as HTMLElement)
            .querySelector('table') as HTMLTableElement

        const affectedTableCells = Array.from(table.querySelectorAll(`[data-name=${eventName}]`)) as HTMLElement[]

        const columnToggleListElement = Array.from(event.list.children)
            .find(child => (child as HTMLLIElement).dataset.name === event.name) as HTMLLIElement
        const svgIcon = columnToggleListElement.children[0] as HTMLElement

        svgIcon.style.opacity = svgIcon.style.opacity === '0'
            ? '1'
            : '0'

        if (svgIcon.style.opacity === '0') {
            affectedTableCells.forEach(cell => cell.dataset.hidden = 'true')
        } else {
            affectedTableCells.forEach(cell => cell.removeAttribute('data-hidden'))
        }
    })

    listen('paginate', event => {
        const table = event.target
            .closest('section')
            .querySelector('table')

        if (!table) {
            return
        }

        const tableRows = Array.from(table.querySelectorAll('tbody tr') as NodeListOf<HTMLTableRowElement>)

        table.dataset.page = event.page

        tableRows.forEach(row => {
            if (Number(row.dataset.page) === event.page) {
                row.removeAttribute('data-hidden')
            } else {
                row.dataset.hidden = 'true'
            }
        })
    })
</script>
