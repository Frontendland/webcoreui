---
import type { ThemeSwitcherProps } from './themeswitcher'
import styles from './themeswitcher.module.scss'

interface Props extends ThemeSwitcherProps {}

const {
    themes,
    toggle,
    size,
    className
} = Astro.props

const classes = [
    styles.switcher,
    toggle && styles.toggle,
    className
]

const primaryTheme = themes[Object.keys(themes)[0]]
const secondaryTheme = themes[Object.keys(themes)[1]]
const useIcons = Astro.slots.has('primaryIcon') && Astro.slots.has('secondaryIcon') 

const buttonClasses = [
    styles.switch,
    useIcons && styles.icons
]
---

<div
    class:list={classes}
    style={size ? `--w-theme-switcher-size: ${size}px;` : null}
    data-id="w-theme-switcher"
    data-primary-theme={primaryTheme}
    data-secondary-theme={toggle ? secondaryTheme : undefined}
>
    {Object.keys(themes as {}).map((theme, index) => (
        <button
            style={!useIcons ? `background:${theme};` : undefined}
            data-theme={themes[theme]}
            aria-label={themes[theme]}
            class:list={buttonClasses}
        >
            {index === 0 && <slot name="primaryIcon" />}
            {index !== 0 && <slot name="secondaryIcon" />}
        </button>
    ))}
</div>

<script>
    import { setCookie, getCookie } from '../../utils/cookies'
    import { listen, dispatch } from '../../utils/event'

    const switchers = document.querySelectorAll('[data-id="w-theme-switcher"]')
    
    let currentTheme = localStorage.getItem('w-theme')
        || getCookie('w-theme')
        || (switchers[0] as HTMLDivElement).dataset.primaryTheme
        || ''

    const setActiveButton = (buttons: HTMLButtonElement[]) => {
        buttons.forEach(button => button.dataset.active = 'false')

        buttons.forEach(button => {
            if (button.dataset.theme === currentTheme) {
                button.dataset.active = 'true'
            }
        })
    }

    Array.from(switchers).forEach(switcher => {
        const buttons = Array.from(switcher.querySelectorAll('button'))

        setActiveButton(buttons)

        listen('theme-switched', theme => {
            currentTheme = theme

            setActiveButton(buttons)
        })

        switcher.addEventListener('click', event => {
            const target = event.target as HTMLButtonElement

            if (target.nodeName === 'BUTTON') {
                const toggleTheme = (switcher as HTMLDivElement).dataset.secondaryTheme

                const theme = toggleTheme
                    ? toggleTheme === target.dataset.theme
                        ? (target.previousElementSibling as HTMLButtonElement).dataset.theme as string
                        : (target.nextElementSibling as HTMLButtonElement).dataset.theme as string
                    : target.dataset.theme as string

                document.body.classList.replace(currentTheme, theme)

                currentTheme = theme

                setActiveButton(buttons)
                setCookie('w-theme', currentTheme, 30)
                localStorage.setItem('w-theme', currentTheme)

                dispatch('theme-switched', currentTheme)
            }
        })
    })
</script>

