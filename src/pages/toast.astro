---
import ComponentWrapper from '@static/ComponentWrapper.astro'
import Layout from '@static/Layout.astro'

import Button from '@components/Button/Button.astro'
import Icon from '@components/Icon/Icon.astro'
import AstroToast from '@components/Toast/Toast.astro'
import SvelteToast from '@components/Toast/Toast.svelte'
import ReactToast from '@components/Toast/Toast.tsx'

import { getSections } from '@helpers'

const sections = getSections({
    title: 'toasts',
    components: [AstroToast, SvelteToast, ReactToast]
})
---

<Layout>
    <h1>Toast</h1>
    <div class="grid md-2 lg-3">
        <ComponentWrapper type="Astro">
            <Button theme="secondary" id="toast-btn-astro">
                Toast in Astro
            </Button>

            <AstroToast title="Astro toast" id="toast-astro">
                Toast in Astro
            </AstroToast>
        </ComponentWrapper>

        <ComponentWrapper type="Svelte">
            <Button theme="alert" id="toast-btn-svelte">
                Toast in Svelte
            </Button>

            <SvelteToast title="Svelte toast" theme="alert" id="toast-svelte">
                Toast in Svelte
            </SvelteToast>
        </ComponentWrapper>

        <ComponentWrapper type="React">
            <Button theme="info" id="toast-btn-react">
                Toast in React
            </Button>

            <ReactToast title="React toast" theme="info" id="toast-react">
                Toast in React
            </ReactToast>
        </ComponentWrapper>
    </div>

    {sections.map((section, index) => (
        <h1>{section.title}</h1>
        <div class="flex wrap">
            <Button theme="outline" id={`toast-btn-0${index}`}>Toast with text only</Button>
            <Button theme="secondary" id={`toast-btn-1${index}`}>Toast with text and title</Button>
            <Button theme="secondary" id={`toast-btn-2${index}`}>üí° Toast with emoji in title</Button>
            <Button theme="info" id={`toast-btn-3${index}`}>Informational toast</Button>
            <Button theme="success" id={`toast-btn-4${index}`}>Success toast</Button>
            <Button theme="warning" id={`toast-btn-5${index}`}>Warning toast</Button>
            <Button theme="alert" id={`toast-btn-6${index}`}>Alert toast</Button>
            <Button theme="secondary" id={`toast-btn-7${index}`}>üé® Toast with custom icon</Button>
            <Button theme="secondary" id={`toast-btn-8${index}`}>üé® Themed toast with icon</Button>
            <Button theme="secondary" id={`toast-btn-9${index}`}>‚ÜôÔ∏èToast in bottom left</Button>
            <Button theme="secondary" id={`toast-btn-10${index}`}>‚ÜñÔ∏è Toast in top left</Button>
            <Button theme="secondary" id={`toast-btn-11${index}`}>‚ÜóÔ∏èToast in top right</Button>
            <Button theme="secondary" id={`toast-btn-12${index}`}>‚¨áÔ∏è Bottom full ‚¨áÔ∏è</Button>
            <Button theme="secondary" id={`toast-btn-13${index}`}>‚¨ÜÔ∏è Top full ‚¨ÜÔ∏è</Button>
        </div>
        <div class="grid md-2 my">
            <section.component id={`toast-0${index}`}>
                Toast with only text.
            </section.component>
            <section.component title="Note" id={`toast-1${index}`}>
                Toast with text and title.
            </section.component>
            <section.component title="üí° Note" id={`toast-2${index}`}>
                Toast with emoji in title
            </section.component>
            <section.component title="Information" theme="info" id={`toast-3${index}`}>
                Toast with info theme.
            </section.component>
            <section.component title="Congratulations!" theme="success" id={`toast-4${index}`}>
                Toast with success theme.
            </section.component>
            <section.component title="Important" theme="warning" id={`toast-5${index}`}>
                Toast with warning theme.
            </section.component>
            <section.component title="Irreversible action" theme="alert" id={`toast-6${index}`}>
                Toast with alert theme.
            </section.component>
            <section.component title="Custom icons" id={`toast-7${index}`}>
                <Icon type="github" slot="icon" />
                Toast with custom icon.
            </section.component>
            <section.component title="Themed toast with icon" theme="success" id={`toast-8${index}`}>
                <Icon type="github" slot="icon" />
                Toast with theme and icon.
            </section.component>
            <section.component title="Bottom left" id={`toast-9${index}`} position="bottom-left">
                Toast in bottom left corner
            </section.component>
            <section.component title="Top left" id={`toast-10${index}`} position="top-left">
                Toast in top left corner
            </section.component>
            <section.component title="Top right" id={`toast-11${index}`} position="top-right">
                Toast in top right corner
            </section.component>
            <section.component title="Bottom full" id={`toast-12${index}`} position="bottom-full">
                Toast in bottom with full width
            </section.component>
            <section.component title="Top full" id={`toast-13${index}`} position="top-full">
                Toast in top with full width
            </section.component>

            <ComponentWrapper title="Dismissable toast with long timeout">
                <Button id={`dismissable-show-${index}`}>
                    Show Toast
                </Button>

                <Button theme="secondary" id={`dismissable-hide-${index}`}>
                    Hide Toast
                </Button>

                <section.component title="Dismissable toast" id={`dismissable-toast-${index}`}>
                    Toast shown for 10 seconds.<br />
                    Trigger dismiss with "Hide Toast".
                </section.component>
            </ComponentWrapper>

            <ComponentWrapper title="Programmatically setting copy & pos">
                <Button theme="secondary" id={`programmatic-btn-${index}`}>
                    Programmatically setting copy
                </Button>

                <section.component title="Original title" id={`programmatic-toast-${index}`}>
                    Original content
                </section.component>

                <Button theme="secondary" id={`pos-btn-${index}`}>
                    Show Toast in top-left corner
                </Button>

                <section.component title="Original title" id={`pos-toast-${index}`}>
                    Original content
                </section.component>
            </ComponentWrapper>
        </div>
    ))}
</Layout>

<script>
    import {
        hideToast,
        setDefaultTimeout,
        toast
    } from '@utils/toast'

    import { on } from '@helpers'

    setDefaultTimeout(3000)

    const ids = Array(13).fill(10).map((x, index) => x * (index + 1))
    const buttons = [
        'astro',
        'svelte',
        'react',
        '00',
        '01',
        '02',
        ...ids,
        ...ids.map(x => x + 1),
        ...ids.map(x => x + 2)
    ]

    // Show toast functionaly
    buttons.forEach(id => {
        on(`#toast-btn-${id}`, () => toast(`#toast-${id}`))
    });

    // Dismissable functionality with long timeout
    [0, 1, 2].forEach(x => {
        on(`#dismissable-show-${x}`, () => {
            toast({
                element: `#dismissable-toast-${x}`,
                timeout: 10_000
            })
        })

        on(`#dismissable-hide-${x}`, () => {
            hideToast(`#dismissable-toast-${x}`)
        })
    });

    // Programmatically setting title & content
    [0, 1, 2].forEach(x => {
        on(`#programmatic-btn-${x}`, () => {
            toast({
                element: `#programmatic-toast-${x}`,
                title: 'Title set through JS',
                content: 'Content created in JS with <strong>HTML</strong>'
            })
        })
    });

    // Programmatically setting position
    [0, 1, 2].forEach(x => {
        on(`#pos-btn-${x}`, () => {
            toast({
                element: `#pos-toast-${x}`,
                title: 'Title set through JS',
                position: 'top-left'
            })
        })
    })
</script>
